---
title:  Fluxograma do funcionamento do Computador IAS (https://github.com/davidalain/ias_computer)
---
flowchart TB

subgraph _fetch_cycle_ [Fetch Cycle]
    START((Start)):::greenClass --> B{"Is next
    instruction 
    in IBR?"}
    B --> |"Yes

    No memory access
    required"| F("IR ← IBR(0:7)
    MAR ← IBR(8:19)")
    F --> I
    B --> |No| C("MAR ← PC")
    C --> D("MBR ← M(MAR)")
    D --> E{"Left
    instruction
    required?"}
    E --> |No| H("IR ← MBR(20:27)
    MAR ← MBR(28:39)")
    E --> |Yes| G("IBR ← MBR(20:39)
    IR ← MBR(0:7)
    MAR ← MBR(8:19)")
    H --> I("PC ← PC + 1
    Reset IBR")
end

subgraph _decode_ [ ]
    I --> DECODE
    G --> DECODE
    DECODE{{"Decode instruction in IR"}}:::orangeClass

    style _decode_ fill:transparent,stroke:transparent

    direction TB
end


subgraph _execution_cycle_ [Execution Cycle]

    %%%%  Instruções de transferência de dados
    %% [José Otávio Gurgel Souto](https://github.com/OTGSJ)
    %% [Fagner Timoteo da Silva](https://github.com/Othergamer1)
    %% [João Pedro Bezerra Oliveira](https://github.com/yJPBO)

    DECODE --->|"LOAD MQ
    Opcode: 00001010"| loadmq_sp

    subgraph loadmq_sp ["LOAD MQ"];
    %%Transfere o valor de MQ para AC
        loadmq01["AC ← MQ"]
        direction TB
    end

    DECODE --->|"LOAD MQ,M(X)
    Opcode: 00001001"| loadmqmx_sp

    subgraph loadmqmx_sp ["LOAD MQ,M(X)"];
    %%Transfere o valor de M(X) para MQ
            loadmqmx01["MBR ← M(MAR)"]
            loadmqmx02["MQ ← MBR"]

            loadmqmx01 --> loadmqmx02
            direction TB
    end

    DECODE --->|"STOR M(X)
    Opcode: 00100001"| stormx_sp

    subgraph stormx_sp ["STOR M(X)"];
    %%Transfere o valor de AC para para M(X)
            stormx01["MBR ← AC"]
            stormx02["M(MAR) ← MBR"]

            stormx01 --> stormx02
            direction TB
    end

    DECODE --->|"LOAD M(X)
    Opcode: 00000001"| loadmx_sp

    subgraph loadmx_sp["LOAD MX"];
    %%Transfere o valor de M(X) para AC
            loadmx01["MBR ← M(MAR)"]
            loadmx02["AC ← MBR"]

            loadmx01 --> loadmx02
            direction TB
    end

    DECODE --->|"LOAD -M(X)
    Opcode: 00000010"| loadminusmx_sp

    subgraph loadminusmx_sp ["LOAD -M(X)"];
    %%Transfere o valor negativo de M(X) para AC 
            loadminusmx01["MBR ← -M(MAR)"]
            loadminusmx02["AC ← MBR"]

            loadminusmx01 --> loadminusmx02
            direction TB
    end

    DECODE --->|"LOAD |M(X)|
    Opcode: 00000011"| loadabsolutemx_sp

    subgraph loadabsolutemx_sp["LOAD |M(X)|"];
    %%Transfere o valor absoluto de M(X) para AC
            loadabsolutemx01["MBR ← |M(MAR)|"]
            loadabsolutemx02["AC ← MBR"]

            loadabsolutemx01 --> loadabsolutemx02
            direction TB
    end

    DECODE --->|"LOAD -|M(X)|
    Opcode: 00000100"| loadminusabsolutemx_sp

    subgraph loadminusabsolutemx_sp["LOAD -|M(X)|"];
    %%Transfere o valor absoluto negativo de M(X) para AC
            loadminusabsolutemx01["MBR ← -|M(MAR)|"]
            loadminusabsolutemx02["AC ← MBR"]

            loadminusabsolutemx01 --> loadminusabsolutemx02
            direction TB
    end
	
end

subgraph _end_ [End]
    style _end_ fill:transparent,stroke:transparent

    END(("Go back
    to Start")):::greenClass

    loadmq_sp --- END
    loadmqmx_sp --- END
    stormx_sp --- END
    loadmx_sp--- END
    loadminusmx_sp --- END
    loadabsolutemx_sp --- END
    loadminusabsolutemx_sp --- END
	
    direction TB
end

classDef greenClass fill:#008000
classDef orangeClass fill:#FF6347